Arrange elements in a given Linked List such that, all even numbers are placed after odd numbers. Respective order of elements should remain same.
Note: Input and Output has already managed for you. You don't need to print the elements, instead return the head of updated LL.
Input format:
Linked list elements (separated by space and terminated by -1)
Output format:
Print the elements of updated Linked list. 
Sample Input 1 :
1 4 5 2 -1
Sample Output 1 :
1 5 4 2 
Sample Input 2 :
1 11 3 6 8 0 9 -1
Sample Output 2 :
1 11 3 9 6 8 0


public class Solution {
	public static LinkedListNode<Integer> sortEvenOdd(LinkedListNode<Integer> head) {
		if(head == null || head.next == null)
            return head;
        
        LinkedListNode<Integer> evenHead = new LinkedListNode<>(0);
        LinkedListNode<Integer> oddHead = new LinkedListNode<>(0);
        
        LinkedListNode<Integer> curEven = evenHead;
        LinkedListNode<Integer> curOdd = oddHead;
        
        while(head != null){
            if(head.data % 2 == 0){
                curEven.next = head;
                curEven = curEven.next;
            }
            else{
                curOdd.next = head;
                curOdd = curOdd.next;
            }
            head = head.next;
        }
        curEven.next = null;
        curOdd.next = evenHead.next;
        return oddHead.next;

	}
}
