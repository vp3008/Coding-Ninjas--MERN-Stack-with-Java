Implement kReverse( int k ) in a linked list i.e. you need to reverse first K elements then reverse next k elements and join the linked list and so on.
Indexing starts from 0. If less than k elements left in the last, you need to reverse them as well. If k is greater than length of LL, reverse the complete LL.
You don't need to print the elements, just return the head of updated LL.
Input format :

Line 1 : Linked list elements (separated by space and terminated by -1)

Line 2 : k

Sample Input 1 :
1 2 3 4 5 6 7 8 9 10 -1
4
Sample Output 1 :
4 3 2 1 8 7 6 5 10 9
Sample Input 2 :
1 2 3 4 5 -1
2
Sample Output 2 :
2 1 4 3 5 
Sample Input 3 :
1 2 3 4 5 6 7 -1
3
Sample Output 3 :
3 2 1 6 5 4 7


public class Solution {


	public static LinkedListNode<Integer> reverse(LinkedListNode<Integer> head){

		LinkedListNode<Integer> pre=null,curr=head;
		while(curr!=null){

			LinkedListNode<Integer> temp= curr.next;
			curr.next=pre;
			pre=curr;
			curr=temp;
		}
		return pre;


	}
	public static int len(LinkedListNode<Integer> head){
		int l=0;
		while(head!=null){
			l++;
			head=head.next;
		}
		return l;
	}

	public static LinkedListNode<Integer> kReverse(LinkedListNode<Integer> head, int k) {

		if(k >= len(head)){
			return reverse(head);
		}
		LinkedListNode<Integer> tempHead= head;
		for(int i=1;i<k;i++){
			head=head.next;
		}
		LinkedListNode<Integer> temp=head.next;
		head.next=null;
		LinkedListNode<Integer> reversedHead= reverse(tempHead);
		LinkedListNode<Integer> tail= tempHead;
		LinkedListNode<Integer> smallAns= kReverse(temp,k);
		tail.next= smallAns;
		return reversedHead;


	}
}
