Given a string expression, check if brackets present in the expression are balanced or not. Brackets are balanced if the bracket which opens last, closes first.
You need to return true if it is balanced, false otherwise.
Note: This problem was asked in initial rounds in Facebook
Sample Input 1 :
{ a + [ b+ (c + d)] + (e + f) }
Sample Output 1 :
true
Sample Input 2 :
{ a + [ b - c } ]
Sample Output 2 :
false


import java.util.*;
public class Solution {

	public static boolean checkBalanced(String exp) {
		// Write your code here
        Stack<Character> stack = new Stack<>();
        for(int i=0; i<exp.length(); i++){
            char ch = exp.charAt(i);
            if(!stack.isEmpty() && (ch == '}' || ch == ')' || ch == ']')){
                if(stack.isEmpty() || !isMatch(stack.pop(), ch))
                    return false;
            }
            if(ch == '(' || ch == '{' || ch == '['){
                stack.push(ch);
            }
        }
        return stack.isEmpty();
	}
    
    private static boolean isMatch(char c1, char c2){
        if(c1 == '(' && c2 == ')')
            return true;
        if(c1 == '{' && c2 == '}')
            return true;
        if(c1 == '[' && c2 == ']')
            return true;
        else 
            return false;
    }
}